name: MLOps Pipeline - AI Agent Orchestration Hub

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ai-agent-orchestration-hub

jobs:
  # Code Quality & Security
  quality-gate:
    name: 🔍 Quality Gate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety mypy
          
      - name: Code formatting check
        run: black --check api/
        
      - name: Type checking
        run: mypy api/
        
      - name: Security scan
        run: |
          bandit -r api/
          safety check
          
      - name: Lint check
        run: flake8 api/

  # Comprehensive Testing
  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: quality-gate
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run unit tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/ --cov=api --cov-report=xml --cov-report=html --cov-fail-under=85
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  # Docker Build & Security Scan
  docker-build:
    name: 🐳 Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [quality-gate, test-suite]
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository}}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  # Integration Testing
  integration-test:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Start application stack
        run: |
          cp .env.example .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_TEST }}" >> .env
          docker-compose up -d
          
      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
          
      - name: Run integration tests
        run: |
          python -m pip install --upgrade pip
          pip install requests pytest
          pytest tests/test_integration.py -v
          
      - name: API endpoint testing
        run: |
          # Test health endpoint
          curl -f http://localhost:8000/health
          
          # Test analyze endpoint
          curl -X POST http://localhost:8000/analyze \
            -H "Content-Type: application/json" \
            -d '{"query": "Test market analysis", "execution_mode": "sequential"}' \
            --fail
            
      - name: Collect logs
        if: failure()
        run: |
          docker-compose logs > integration-logs.txt
          
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: integration-logs
          path: integration-logs.txt

  # Performance Testing
  performance-test:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install load testing tools
        run: pip install locust
        
      - name: Start application
        run: |
          cp .env.example .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_TEST }}" >> .env
          docker-compose up -d
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
          
      - name: Run performance tests
        run: |
          # Create simple load test
          cat > locustfile.py << EOF
          from locust import HttpUser, task, between
          
          class APIUser(HttpUser):
              wait_time = between(1, 3)
              
              @task
              def health_check(self):
                  self.client.get("/health")
                  
              @task(3)
              def analyze_endpoint(self):
                  self.client.post("/analyze", json={
                      "query": "Quick market analysis test",
                      "execution_mode": "sequential"
                  })
          EOF
          
          # Run load test
          locust --headless -u 10 -r 2 -t 30s --host http://localhost:8000

  # Deployment (Production)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, integration-test, performance-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment"
          echo "Image: ${{ needs.docker-build.outputs.image }}"
          echo "Digest: ${{ needs.docker-build.outputs.digest }}"
          # Add your production deployment logic here
          # e.g., kubectl apply, terraform apply, etc.

  # Notification
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [quality-gate, test-suite, docker-build, integration-test]
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.quality-gate.result == 'success' && needs.test-suite.result == 'success' && needs.docker-build.result == 'success' && needs.integration-test.result == 'success' }}
        run: |
          echo "✅ MLOps Pipeline completed successfully!"
          echo "- Quality gate: Passed"
          echo "- Test suite: Passed"  
          echo "- Docker build: Passed"
          echo "- Integration tests: Passed"
          
      - name: Notify failure
        if: ${{ needs.quality-gate.result == 'failure' || needs.test-suite.result == 'failure' || needs.docker-build.result == 'failure' || needs.integration-test.result == 'failure' }}
        run: |
          echo "❌ MLOps Pipeline failed!"
          echo "Please check the logs and fix the issues."
